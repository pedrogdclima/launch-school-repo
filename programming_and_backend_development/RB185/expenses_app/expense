#! /usr/bin/env ruby

require "pg"
require "date"
require "io/console"

class ExpenseData
  def initialize
    @connection = PG.connect(dbname: "expense_db")
  end

  def display_result(query_result)
    query_result.each do |tuple|
      columns = [ tuple["id"].rjust(3),
                  tuple["created_on"].rjust(10),
                  tuple["amount"].rjust(12),
                  tuple["memo"] ]
      puts columns.join(" | ")
    end
  end

  def list_expenses
    result = @connection.exec("SELECT * FROM expenses ORDER BY created_on ASC")
    display_result(result)
  end

  def add_expense(arguments)
    date = Date.today
    sql = "INSERT INTO expenses(amount, memo, created_on) VALUES ($1, $2, $3)"
    @connection.exec_params(sql, [arguments[1], argument[2], date])
  end

  def search_expense(arguments)
    sql = "SELECT * FROM expenses WHERE memo ILIKE $1"
    result = @connection.exec_params(sql, ["%#{arguments[1]}%"])
    display_result(result)
  end

  def delete_expense(arguments)
    row_sql = "SELECT * FROM expenses WHERE id = $1"
    result = @connection.exec_params(row_sql, [arguments[1]])
    delete_sql = "DELETE FROM expenses WHERE id = $1"
    @connection.exec_params(delete_sql, [arguments[1]])
    if result.ntuples == 0
      puts "There is no expense with id #{arguments[1]}"
    else
      puts "The following expense has been deleted"
      display_result(result)
    end
  end

  def delete_all_expenses
    @connection.exec("DELETE FROM expenses")
    puts "All expenses were deleted."
  end
end

class CLI
  def initialize
    @application = ExpenseData.new
  end

  def display_help
    puts <<~HELP
      An expense recording system
  
      Commands:
  
      add AMOUNT MEMO - record a new expense
      clear - delete all expenses
      list - list all expenses
      delete NUMBER - remove expense with id NUMBER
      search QUERY - list expenses with a matching memo field
    HELP
  end

  def run(arguments)
    case
    when arguments[0] == "list"
      @application.list_expenses
    when arguments[0] == "add"
      if arguments.size < 2
        puts "You must provide an amount and a memo."
      else
        @application.add_expense(arguments)
      end
    when arguments[0] == "search"
      @application.search_expense(arguments)
    when arguments[0] == "delete"
      if arguments.size < 2
        puts "You must provide the id of the expense to be deleted."
      else
        @application.delete_expense(arguments)
      end
    when arguments[0] == "clear"
      puts "Are you sure you want to delete all expenses? (y/n)"
      @application.delete_all_expenses if $stdin.getch == "y"
    else
      display_help
    end
  end
end

CLI.new.run(ARGV)
